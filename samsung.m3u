<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>JASS M3U - IPTV</title>
  <style>
    /* Reset and base styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Arial', sans-serif;
    }

    body,
    html {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      min-height: 100vh;
      background-color: rgba(0, 0, 0, 0.8); /* Light black background */
      color: white;
      padding: 0 15px;
      scroll-behavior: smooth;
      overflow-y: auto; /* Allow scrolling */
    }

    /* Header with subtle transparent background and light white border */
    .header {
      width: 100%;
      max-width: 700px;
      text-align: center;
      font-size: 32px;
      font-weight: bold;
      padding: 20px;
      background: rgba(0, 0, 0, 0.6); /* Slightly transparent background */
      color: white;
      border-radius: 12px;
      margin-top: 30px;
      border: 2px solid rgba(255, 255, 255, 0.3); /* Light white transparent border */
      box-shadow: 0 0 25px rgba(255, 255, 255, 0.3);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .header:hover {
      transform: scale(1.05);
      box-shadow: 0 0 35px rgba(255, 255, 255, 0.7);
    }

    /* Main container with soft gradient background and light white transparent border */
    .container {
      width: 100%;
      max-width: 700px;
      margin-top: 30px;
      text-align: center;
      background: rgba(0, 0, 0, 0.5); /* Slightly transparent background */
      border-radius: 15px;
      padding: 30px;
      border: 2px solid rgba(255, 255, 255, 0.3); /* Light white transparent border */
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .container:hover {
      transform: scale(1.03);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
    }

    h1 {
      font-size: 36px;
      color: white;
      text-shadow: 2px 2px 10px rgba(255, 255, 255, 0.3);
    }

    h2 {
      font-size: 24px;
      color: #ff5f5f;
      text-shadow: 2px 2px 10px rgba(255, 95, 95, 0.3);
    }

    /* Textbox container with light white transparent border */
    .textbox-container {
      background-color: rgba(0, 0, 0, 0.4); /* Transparent dark background */
      padding: 20px;
      border-radius: 12px;
      width: 100%;
      max-width: 650px;
      margin-bottom: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3); /* Light white transparent border */
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .textbox-container:hover {
      transform: scale(1.02);
      box-shadow: 0 0 20px rgba(255, 95, 95, 0.5);
    }

    /* Input field with light white transparent border */
    input {
      width: 100%;
      padding: 14px;
      font-size: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3); /* Light white transparent border */
      border-radius: 8px;
      text-align: center;
      background-color: rgba(0, 0, 0, 0.5); /* Transparent dark background */
      color: white;
      transition: border-color 0.3s ease;
    }

    input:focus {
      border-color: #ff5f5f;
      outline: none;
    }

    /* Button with hover effect */
    button {
      background: #ff5f5f;
      color: white;
      border: none;
      padding: 12px 25px;
      margin-top: 15px;
      cursor: pointer;
      border-radius: 8px;
      font-size: 16px;
      transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
    }

    button:hover {
      transform: scale(1.1);
      background-color: #ff3b3b; /* Darker red on hover */
      box-shadow: 0 5px 15px rgba(255, 95, 95, 0.7);
    }

    /* Telegram button */
    .telegram-button {
      display: inline-block;
      margin-top: 20px;
      padding: 14px 30px;
      border-radius: 50px;
      background: linear-gradient(135deg, #0088cc, #005f99);
      color: white;
      font-size: 18px;
      text-decoration: none;
      font-weight: bold;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      transition: all 0.3s ease;
    }

    .telegram-button:hover {
      background: linear-gradient(135deg, #00aaff, #0077cc);
      transform: scale(1.1);
      box-shadow: 0 6px 15px rgba(0, 136, 204, 0.5);
    }

    /* Features section with modern transparent background and border */
    .features {
      background: rgba(0, 0, 0, 0.5); /* Slightly transparent background */
      padding: 20px;
      border-radius: 12px;
      margin-top: 30px;
      max-width: 650px;
      text-align: left;
      font-size: 18px;
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.3); /* Light white transparent border */
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 28px;
      }
      h2 {
        font-size: 22px;
      }
      button {
        font-size: 14px;
        padding: 10px 20px;
      }
      .telegram-button {
        font-size: 16px;
        padding: 12px 25px;
      }
    }

    /* --- Background Animations --- */

    /* Particle canvas */
    #particle-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -3;
    }

    /* Full-screen background gradient with pulse animation */
    .background-animation {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(45deg, #6E56CF, #FF6B6B);
      opacity: 0.2;
      filter: blur(80px);
      z-index: -2;
      animation: pulse 10s ease-in-out infinite alternate;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }
      100% {
        transform: scale(1.1);
      }
    }
  </style>
</head>
<body>
  <!-- Background animations: particle canvas and animated background -->
  <canvas id="particle-canvas"></canvas>
  <div class="background-animation"></div>

  <!-- Header -->
  <div class="header">JASS M3U - IPTV Playlist</div>

  <!-- Main container -->
  <div class="container">
    <h2>Xtream Playlist Generator</h2>
    <div class="textbox-container">
      <?php if (empty($token)) : ?>
        <input type="text" value="Activate your playlist" readonly />
        <button onclick="window.location.href='https://gplinks.co/PjLTm5J'">Activate</button>
      <?php else : ?>
        <?php $playlistUrl = "https://$serverAddress/playlist.m3u?token=$token"; ?>
        <input type="text" id="myInput" value="<?php echo $playlistUrl; ?>" readonly />
        <button onclick="copyToClipboard()">Copy</button>
      <?php endif; ?>
    </div>
    <a href="https://t.me/YourTelegramChannel" class="telegram-button" target="_blank">Join Telegram</a>
  </div>

  <!-- Features section -->
  <div class="features">
    <h2>👑🌟🅵🅴🅰🆃🆄🆁🅴🆂🌟👑</h2>
    <ul>
      <li>✔🅷🅸🅶🅷-🆀🆄🅰🅻🅸🆃🆈 🆂🆃🆁🅴🅰🅼🅸🅽🅶</li>
      <li>✔🅼🆄🅻🆃🅸-🅳🅴🆅🅸🅲🅴 🆂🆄🅿🅿🅾🆁🆃 💻📱🖥</li>
      <li>✔ 🆁🅴🅶🆄🅻🅰🆁 🆄🅿🅳🅰🆃🅴🆂</li>
      <li>✔🛜🆂🅴🅲🆄🆁 & 🅵🅰🆂🆃 🅰🅲🅲🅴🆂🆂🛜</li>
      <li>✔📡🅰🅻🅻 🅸🅿🆃🆅 🅿🅻🅰🆈🅴🆁 🆂🆄🅿🅿🅾🆁🆃📡 </li>
    </ul>
  </div>

  <!-- Copy-to-clipboard script -->
  <script>
    function copyToClipboard() {
      var copyText = document.getElementById("myInput");
      copyText.select();
      document.execCommand("copy");
      alert("Copied: " + copyText.value);
    }
  </script>

  <!-- Particle Animation Script -->
  <script>
    (function () {
      const canvas = document.getElementById("particle-canvas");
      const ctx = canvas.getContext("2d");
      // Set canvas to window dimensions
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const particles = [];
      const particleCount = 100; // Adjust number of particles as desired
      const colors = ["#FF6B6B", "#6E56CF", "#F1DFFF"];

      class Particle {
        constructor(x, y) {
          this.x = x;
          this.y = y;
          this.speedX = (Math.random() - 0.5) * 2;
          this.speedY = (Math.random() - 0.5) * 2;
          this.size = Math.random() * 3 + 1;
          this.color = colors[Math.floor(Math.random() * colors.length)];
        }
        update() {
          this.x += this.speedX;
          this.y += this.speedY;
          // Wrap particles when they go off screen
          if (this.x < 0) this.x = canvas.width;
          if (this.x > canvas.width) this.x = 0;
          if (this.y < 0) this.y = canvas.height;
          if (this.y > canvas.height) this.y = 0;
        }
        draw() {
          ctx.fillStyle = this.color;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fill();
        }
      }

      function initParticles() {
        for (let i = 0; i < particleCount; i++) {
          particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));
        }
      }

      function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        particles.forEach((p) => {
          p.update();
          p.draw();
        });
        requestAnimationFrame(animateParticles);
      }

      // Adjust canvas size on window resize
      window.addEventListener("resize", function () {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      });

      initParticles();
      animateParticles();

      // (Optional) Add some interactivity on mouse move:
      const mouse = { x: null, y: null };
      window.addEventListener("mousemove", function (e) {
        mouse.x = e.x;
        mouse.y = e.y;
        // Add new particle at the mouse position
        particles.push(new Particle(mouse.x, mouse.y));
        // Limit total particles to avoid performance issues
        if (particles.length > 300) {
          particles.splice(0, particles.length - 300);
        }
      });
    })();
  </script>
</body>
</html>
